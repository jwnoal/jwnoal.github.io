---
import Card from "../../../components/Card.astro";
import BaseLayout from "../../../layouts/BaseLayout.astro";
import type { Page, GetStaticPathsOptions } from "astro";
import { type CollectionEntry, getCollection } from "astro:content";

export async function getStaticPaths({ paginate }: GetStaticPathsOptions) {
  const allPosts = await getCollection("blog");
  const uniqueTag = [...new Set(allPosts.map((p) => p.data.tags).flat())];
  
  return uniqueTag.flatMap((tag) => {
    const filtered = allPosts.filter(
      (p) => p.data.tags.includes(tag) && !p.data.draft
    );
    return paginate(filtered, {
      params: { tag },
      pageSize: 18,
    });
  });
}

interface page extends Omit<Page, "data"> {
  data: CollectionEntry<"blog">[];
}

interface Props {
  page: page;
}

const { tag } = Astro.params;
const { page } = Astro.props;
---

<BaseLayout
  title={`tag/${tag}`}
  description={`Tous les post de blog concernant le tag ${tag}`}
  className={"grid"}
  canonicalURL={`tag/${tag}`}
>
  <Fragment slot="main">
    {
      page.data.map(({ slug, data }) => (
        <Card
          title={data.title}
          pubDate={data.pubDate}
          description={data.description}
          url={`/blog/${slug}`}
          tags={data.tags}
        />
      ))
    }
    {
      page.lastPage > 1 && (
        <nav aria-label="pagination" class="nav-paginate">
          <ul>
            {page.url.prev ? (
              <li class="btn">
                <a href={page.url.prev}>Previous</a>
              </li>
            ) : null}
            {page.url.next ? (
              <li class="btn">
                <a href={page.url.next}>Next</a>
              </li>
            ) : null}
          </ul>
        </nav>
      )
    }
  </Fragment>
</BaseLayout>
